class vector<type T>{
    var ptr:*T;
    var reserved_size:uint64;
    var _size:uint64 = 0;
    vector(){
        ptr = malloc(sizeof<T>() * 5);
        reserved_size = 5;
    }
    fn bool need_expanding(){
        return reserved_size == _size;
    }
    fn void expand(){
        reserved_size = reserved_size*2;
        ptr = realloc(ptr, reserved_size);
    }
    fn uint64 size(){
        return _size;
    }
    fn void push_back(Val:T){
        if(need_expanding()) expand();
        ptr[_size] = Val;
        _size = _size + 1; 
    }
    fn T get(index:uint64){
        return ptr[index];
    }    
}